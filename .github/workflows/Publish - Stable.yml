name: Publish - Stable
on:
  workflow_dispatch:
    inputs:
      package:
        description: "package name"
        required: true
        type: string
      version:
        description: "npm version"
        default: "patch|minor|major"
        required: true
        type: string

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - package: "@discordx/plugin-lava-player"
            folder: "lava-player"
          - package: "@discordx/plugin-ytdl-player"
            folder: "ytdl-player"
    steps:
      - name: Check out code ðŸ›Ž
        if: github.event.inputs.package == matrix.package
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node
        if: github.event.inputs.package == matrix.package
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"

      - name: Synchronize current version
        if: github.event.inputs.package == matrix.package
        run: npm version --git-tag-version=false $(npm view ${{ matrix.package }} version)
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Update version
        if: github.event.inputs.package == matrix.package
        run: npm version --git-tag-version=false ${{ github.event.inputs.version }}
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Install root dependencies
        if: github.event.inputs.package == matrix.package
        run: npm install && npm install -g @discordx/changelog
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Build
        if: github.event.inputs.package == matrix.package
        run: npm run build
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Prepare stage changelog
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        run: npm run build:changelog -- --only-stage --out ./RELEASE_CHANGELOG.md
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Read changelog
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        run: |
          echo 'changelog_content<<EOF' >> $GITHUB_ENV
          cat ./RELEASE_CHANGELOG.md >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Prepare tag
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        id: prepare-tag
        run: echo "tag=${{ matrix.folder }}-`node -p "require('./package.json').version"`" >> $GITHUB_OUTPUT
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Build changelog
        if: github.event.inputs.package == matrix.package
        run: |
          git tag ${{ steps.prepare-tag.outputs.tag }}
          npm run build:changelog
        working-directory: ./plugins/${{ matrix.folder }}

      - name: Create tag
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.prepare-tag.outputs.tag }}',
              sha: context.sha,
            })
      - name: Create release
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.prepare-tag.outputs.tag }}",
              body: `${{ env.changelog_content }}`,
            })
      - name: Release Alert
        if: github.event.inputs.package == matrix.package && github.event.inputs.version != 'patch'
        run: |
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"\`${{ matrix.package }}@`node -p "require('./package.json').version"`\` [released](https://www.npmjs.com/package/${{ matrix.package }}) [[changelog](<https://github.com/discordx-ts/discordx/releases/tag/${{ steps.prepare-tag.outputs.tag }}>)] successfully :tada:\"}" $DISCORD_WEBHOOK &> /dev/null
        working-directory: ./plugins/${{ matrix.folder }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Publish
        if: github.event.inputs.package == matrix.package
        run: npm publish
        working-directory: ./plugins/${{ matrix.folder }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Patch Alert
        if: github.event.inputs.package == matrix.package && github.event.inputs.version == 'patch'
        run: |
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"\`${{ matrix.package }}@`node -p "require('./package.json').version"`\` [released](https://www.npmjs.com/package/${{ matrix.package }}) successfully :tada:\"}" $DISCORD_WEBHOOK &> /dev/null
        working-directory: ./plugins/${{ matrix.folder }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
